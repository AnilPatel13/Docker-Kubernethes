Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"

  # Keep /vagrant enabled so we can drop the join tokens there

  DOCKER_INSTALL = <<-'SHELL'
    set -euo pipefail
    apt-get update -y
    apt-get upgrade -y
    apt-get install -y ca-certificates curl gnupg lsb-release apt-transport-https vim git net-tools wget

    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) stable" \
      > /etc/apt/sources.list.d/docker.list

    apt-get update -y
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    usermod -aG docker vagrant
    systemctl enable --now docker

    # Wait for dockerd to be ready
    for i in $(seq 1 60); do
      if docker info >/dev/null 2>&1; then break; fi
      sleep 2
    done
    docker info >/dev/null  # fail if still not ready

    echo "Docker $(docker --version) installed" | tee /home/vagrant/welcome.txt
    chown vagrant:vagrant /home/vagrant/welcome.txt
  SHELL

  (1..3).each do |i|
    config.vm.define "server#{i}" do |node|
      node.vm.hostname = "server#{i}"
      node.vm.network "private_network", ip: "192.168.56.#{10+i}"

      node.vm.provider "virtualbox" do |vb|
        vb.name  = "server#{i}"
        vb.memory = 8200
        vb.cpus   = 4
      end

      node.vm.provision "shell", inline: DOCKER_INSTALL

      if i == 1
        # Manager init with robust readiness checks
        node.vm.provision "shell", inline: <<-'SHELL'
          set -euo pipefail
          MANAGER_IP="192.168.56.11"

          # Ensure docker is ready
          for i in $(seq 1 60); do
            if docker info >/dev/null 2>&1; then break; fi
            sleep 2
          done
          docker info >/dev/null

          # If already active manager, skip init
          STATE="$(docker info --format '{{.Swarm.LocalNodeState}}' || true)"
          if [ "$STATE" != "active" ]; then
            docker swarm init --advertise-addr "${MANAGER_IP}"
          fi

          # Confirm weâ€™re a manager before proceeding
          CTRL="$(docker info --format '{{.Swarm.ControlAvailable}}' || true)"
          if [ "$CTRL" != "true" ]; then
            echo "ERROR: Node is not manager after init"; exit 1
          fi

          docker swarm join-token -q worker > /vagrant/worker.token
          docker swarm join-token -q manager > /vagrant/manager.token
          echo "Swarm manager ready at ${MANAGER_IP}. Tokens written to /vagrant/*.token"
        SHELL
      else
        # Worker join with waits for Docker + token availability
        node.vm.provision "shell", inline: <<-'SHELL'
          set -euo pipefail
          MANAGER_IP="192.168.56.11"

          # Ensure docker is ready
          for i in $(seq 1 60); do
            if docker info >/dev/null 2>&1; then break; fi
            sleep 2
          done
          docker info >/dev/null

          # Wait for token file from manager
          for i in $(seq 1 120); do
            if [ -f /vagrant/worker.token ]; then break; fi
            sleep 2
          done
          if [ ! -f /vagrant/worker.token ]; then
            echo "Worker token not found after waiting; aborting join."; exit 1
          fi

          # Join only if not already part of a swarm
          STATE="$(docker info --format '{{.Swarm.LocalNodeState}}' || true)"
          if [ "$STATE" != "active" ]; then
            TOKEN="$(cat /vagrant/worker.token)"
            docker swarm join --token "$TOKEN" "${MANAGER_IP}:2377"
          fi

          echo "Joined swarm at ${MANAGER_IP}"
        SHELL
      end
    end
  end
end
